#!/usr/bin/env bash

set -e

start() {
  verify "${@}"
  info
  download


  if [[ -n $RUNNER_CONFIG ]]; then
    say Configuring runner with config.sh ...
    line
    configure
  else
    say Configuring runner with config.sh ... SKIPPED.
  fi

  line

  if [[ -n $RUNNER_RUN ]]; then
    say Launching runner with run.sh ...
    line
    cd $RUNNER_FOLDER

    # Run.sh in a new process.
    ./run.sh &
    RUNNER_PID=$!
    say "Run.sh PID: $RUNNER_PID"
    wait $RUNNER_PID

  else
    say Skipped running due to --no-run option.
    say Exiting github-runner-installer.
  fi

}
welcome() {
  say "GitHub Runner"
  say Welcome! This script will:
  say 1. Install Runner
  say 2. Configure Runner
  say 3. Run Runner
}
info() {
  say "Download path: ${RUNNER_FOLDER}"
  say "This script: ${RUNNER_SCRIPT_PATH}"
  say "Current Dir: ${CALLER_SCRIPT_DIR}"
  say "Environment File: ${RUNNER_SCRIPT_ENV_FILE} ${RUNNER_SCRIPT_ENV_FILE_STATUS}"
  line
  say "Runner Name: ${RUNNER_CONFIG_NAME}"
  say "Repo: ${RUNNER_URL_REPO}"
  say "Labels: ${RUNNER_CONFIG_LABELS}"
  say "Status: ${RUNNER_URL_RUNNERS}"
  line
  say "Run: ${RUNNER_RUN:-no}"

}
usage() {
  say GitHub Runner Script
  echo "--runner-path (RUNNER_PATH)  The path to download the runner script"
  echo "--cleanup-runner     Remove the runner scripts at the end."
  echo "--token (GITHUB_TOKEN) A GitHub API token with admin:write permissions on the repo."
  echo "--repo (GITHUB_REPOSITORY) The GitHub repo to install the runner on. (eg. owner/repo)"
  echo "--name (RUNNER_CONFIG_NAME) The name to give the runner. (Default: $(whoami)@$(hostname -f))"
  echo "--labels (RUNNER_CONFIG_LABELS) A list of labels to assign to the runner. (Default: $(whoami)@$(hostname -f))"
  echo "--no-run (RUNNER_RUN)    If empty, don't run."
  echo "--config-sh-options (RUNNER_CONFIG_OPTIONS) Pass options to the github runner config.sh command."
}
verify() {
  CALLER_SCRIPT_DIR=$(pwd)
  RUNNER_SCRIPT_ENV_FILE="${CALLER_SCRIPT_DIR}/.env"
  if [[ -f "${RUNNER_SCRIPT_ENV_FILE}" ]]; then
    source $RUNNER_SCRIPT_ENV_FILE
  else
    RUNNER_SCRIPT_ENV_FILE_STATUS="(Not found)"
  fi

  # Detect path to this script.
  # @TODO: Rename RUNNER_SCRIPT_ to reduce confusion with github runner CLI
  if [[ -z "$COMPOSER_RUNTIME_BIN_DIR" ]]; then
    RUNNER_SCRIPT_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )/github-runner-installer"
  else
    RUNNER_SCRIPT_PATH="$COMPOSER_RUNTIME_BIN_DIR/github-runner-installer"
  fi
  if [[ ! -f "${RUNNER_SCRIPT_PATH}" ]]; then
     say "Path detection failed."
     say "No file found at ${RUNNER_SCRIPT_PATH}"
     exit 1
  fi
  RUNNER_SCRIPT_DIR=$(dirname $RUNNER_SCRIPT_PATH)

  # Defaults. If ENV vars exist, use them. If not, use these values.
  RUNNER_PATH=${RUNNER_PATH:-"runner"}
  RUNNER_CONFIG_NAME=${RUNNER_CONFIG_NAME:-$(whoami)@$(hostname -f)}
  RUNNER_CONFIG_LABELS=${RUNNER_CONFIG_LABELS:-"jonpugh/github-runner"}
  RUNNER_CONFIG_OPTIONS=${RUNNER_CONFIG_OPTIONS:-""}

  # Whether to run the runner
  RUNNER_RUN=${RUNNER_RUN:-"yes"}
  RUNNER_CONFIG=${RUNNER_CONFIG:-"yes"}

  # Command line Options
  while [ $# -gt 0 ]; do
      case "$1" in
          --help)
            usage
            exit
            ;;

          --runner-path=*)
              RUNNER_PATH="${1#*=}"
              ;;

          --cleanup-runner)
              RUNNER_CLEANUP="yes"
              ;;

          --token=*)
              GITHUB_TOKEN="${1#*=}"
              ;;

          --repo=*)
              GITHUB_REPOSITORY="${1#*=}"
              ;;

          --name=*)
              RUNNER_CONFIG_NAME="${1#*=}"
              ;;
          --labels=*)
              RUNNER_CONFIG_LABELS="${1#*=}"
              ;;

          --config-sh-options=*)
             RUNNER_CONFIG_OPTIONS="${1#*=}"
             ;;

          --no-run)
              RUNNER_RUN=""
              ;;

          --no-config)
              RUNNER_CONFIG=""
              ;;


      esac
      shift $(( $# > 0 ? 1 : 0 ))
  done

  # Helpful URLs
  RUNNER_URL_REPO="https://github.com/${GITHUB_REPOSITORY}"
  RUNNER_URL_RUNNERS="${RUNNER_URL_REPO}/settings/actions/runners"

  line
  welcome

  if [[ -n "${RUNNER_CONFIG}" ]]; then
    if [[ -z "${GITHUB_REPOSITORY}" ]]; then
      line
      say GITHUB_REPOSITORY is required. Use --repo or set the environment variable.
      exit 1
    fi

    # Add name to labels.
    RUNNER_CONFIG_LABELS="${RUNNER_CONFIG_LABELS},${RUNNER_CONFIG_NAME}"

    # Gather API token to create runners.
    if [[ -z "${GITHUB_TOKEN}" ]]; then
      line
      say GITHUB_TOKEN is required. Use --token or set the environment variable.
      say Create a 'Personal Access Token' owned by the organization, with 'admin:write' access on this repository
      say https://github.com/settings/personal-access-tokens/new
      line
      exit 1
    fi
  fi

  # Prepare runner dir.
  line
  say "User: $(whoami)"
  say "Host: $(hostname -f)"
  say "Current directory: $(pwd)"
  say "Runner download path: $RUNNER_PATH"
  line

  if [[ ! -d $RUNNER_PATH ]]; then
    mkdir -p $RUNNER_PATH
    RUNNER_FOLDER=$(realpath $RUNNER_PATH)
    say Created folder: $RUNNER_FOLDER
  else
    RUNNER_FOLDER=$(realpath $RUNNER_PATH)
    say Found folder: $RUNNER_FOLDER
  fi

  line
  info

  # getNewToken.
  line
  RESPONSE=$(curl -L \
    -X POST \
    -H "Accept: application/vnd.github+json" \
    -H "Authorization: Bearer ${GITHUB_TOKEN}" \
    -H "X-GitHub-Api-Version: 2022-11-28" \
    https://api.github.com/repos/${GITHUB_REPOSITORY}/actions/runners/registration-token \
  )
  RUNNER_CONFIG_TOKEN=$(echo $RESPONSE | jq -r .token)
  if [[ "${RUNNER_CONFIG_TOKEN}" == "null" ]]; then
    line
    info
    line
    say Unable to get registration token. Check GITHUB_TOKEN and GITHUB_REPOSITORY and try again.
    say https://github.com/settings/tokens
    line
    say $RESPONSE
    line
    exit 1
  fi
}
currentArchitecture() {
  architecture=$(uname -m)
  case "$architecture" in
      x86_64)
          echo "x64"
          ;;
      aarch64 | arm64)
          echo "arm64"
          ;;
      *)
          exit 1
          ;;
  esac
}
latestVersion() {
  RUNNER_CLI_REPO=actions/runner
  curl -s -L \
    -H "Accept: application/vnd.github+json" \
    -H "Authorization: Bearer ${GITHUB_TOKEN}" \
    -H "X-GitHub-Api-Version: 2022-11-28" \
    https://api.github.com/repos/${RUNNER_CLI_REPO}/releases | \
    jq -r '.[0].name'
}
# @TODO: Detect curl fail
download() {
  cd ${RUNNER_FOLDER}
  TAR_PATH="${RUNNER_FOLDER}/actions-runner.tar.gz"
  RUNNER_CLI_VERSION="${RUNNER_CLI_VERSION:-$(latestVersion)}"
  RUNNER_CLI_VERSION=${RUNNER_CLI_VERSION/?}
  RUNNER_CLI_ARCH="${RUNNER_CLI_ARCH:-$(currentArchitecture)}"
  if [[ -z "${RUNNER_CLI_VERSION}" ]]; then
    say "Unable to determine CLI version. Check GITHUB_TOKEN."
    exit 1
  fi
  if [[ -z "${RUNNER_CLI_ARCH}" ]]; then
    say "Unable to determine architecture using 'uname -m'."
    exit 1
  fi
  TAR_URL="https://github.com/actions/runner/releases/download/v${RUNNER_CLI_VERSION}/actions-runner-linux-${RUNNER_CLI_ARCH}-${RUNNER_CLI_VERSION}.tar.gz"
  say "Downloading ${TAR_URL}"
  if [[ ! -f $TAR_PATH ]]; then
    line
    say "Downloading runner tarball to ${TAR_PATH}..."
    curl -o ${TAR_PATH} -L ${TAR_URL}
  else
    line
    say "Found runner tarball at ${TAR_PATH}..."
  fi
  CONFIG_PATH="${RUNNER_FOLDER}/config.sh"
  if [[ ! -f $CONFIG_PATH ]]; then
    line
    say Extracting ${TAR_PATH}
    tar xzf ${TAR_PATH}
    say "Runner extracted to ${RUNNER_FOLDER}."
  fi
  cd ${OLDPWD}
}
configure() {
  line
  say Configuring GitHub runner...
  say Removing existing runner...

  # Remove
  # @TODO: If runner has a job, wait for it to complete.
  cd $RUNNER_FOLDER
  ./config.sh remove --token ${RUNNER_CONFIG_TOKEN} || say "config remove didn't work."

  line
  say Configuring new runner...

  # Configure
  CMD="./config.sh \
    --token ${RUNNER_CONFIG_TOKEN} \
    --name ${RUNNER_CONFIG_NAME} \
    --url ${RUNNER_URL_REPO} \
    --labels ${RUNNER_CONFIG_LABELS} \
    --replace \
    --unattended \
    ${RUNNER_CONFIG_OPTIONS}
  "
  line
  say $CMD
  line

  $CMD

  line
  say GitHub runner configured:
  info

}

stop() {
  say "Stopped. Run.sh PID: $RUNNER_PID"
  kill $RUNNER_PID
  ./config.sh remove --token ${RUNNER_CONFIG_TOKEN} || say "config remove didn't work."

  exit 0
}
cancel() {
  say "Cancelled. Run.sh PID: $RUNNER_PID"
  kill $RUNNER_PID
  if [[ "${RUNNER_CLEANUP}" == "yes" ]]; then
    say "Cancelled. Removing $RUNNER_FOLDER..."
    rm -rf $RUNNER_FOLDER
  else
    say "Cancelled. The folder $RUNNER_FOLDER was not deleted."
  fi

  ./config.sh remove --token ${RUNNER_CONFIG_TOKEN} || say "config remove didn't work."

  exit 1
}
say() {
  echo " github-runner-installer | ${*}"
}
line() {
  CHARACTER="${CHARACTER:--}"
  COLUMNS="${COLUMNS:-$(tput cols -T xterm)}"
  printf '%*s\n' "${COLUMNS}" '' | tr ' ' "${CHARACTER}"
}

# Set up signal trap
trap stop SIGTERM
trap cancel SIGINT

start "${@}"
